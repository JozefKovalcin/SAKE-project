\documentclass{article}
\usepackage{algorithm}
\usepackage{algpseudocode}
\usepackage{amsmath}
\usepackage{fullpage}

\begin{document}

\section*{SAKE Protocol Pseudocode}

\begin{algorithm}
    \caption{SAKE: Inicializacia retazca klucov}
    \begin{algorithmic}[1]
        \Function{initialize\_key\_chain}{$master\_key, is\_initiator$}
            \State \textbf{Input:} $master\_key$ (32B tajomstvo), $is\_initiator$ (boolean)
            \State \textbf{Output:} Inicializovana struktura $key\_chain$
            
            \State $key\_chain \gets \text{new\_key\_chain\_structure}()$
            \State $key\_chain.master\_key \gets master\_key$ \Comment{Hlavny kluc}
            \State $key\_chain.epoch \gets 0$ \Comment{Zaciatok od epochy 0}
            \State $key\_chain.is\_initiator \gets is\_initiator$
            
            \State $key\_chain.auth\_key\_curr \gets \text{derive\_authentication\_key}(master\_key)$
            
            \If{$is\_initiator$} \Comment{Klient pripravuje kluce}
                \State $temp\_master \gets \text{copy}(master\_key)$
                \State $temp\_auth \gets \text{copy}(key\_chain.auth\_key\_curr)$
                \State \text{evolve\_keys}($temp\_master, temp\_auth, 1$) \Comment{Pre epochu 1}
                \State $key\_chain.auth\_key\_next \gets temp\_auth$ 
                \State $key\_chain.auth\_key\_prev \gets key\_chain.auth\_key\_curr$
                \State \text{secure\_wipe}($temp\_master$) \Comment{Bezpecne vymazanie docasneho kluca}
            \Else \Comment{Server inicializuje vsetky kluce rovnako}
                \State $key\_chain.auth\_key\_prev \gets key\_chain.auth\_key\_curr$
                \State $key\_chain.auth\_key\_next \gets key\_chain.auth\_key\_curr$
            \EndIf
            
            \State \Return $key\_chain$
        \EndFunction
        
        \Function{derive\_authentication\_key}{$master\_key$}
            \State \textbf{Input:} $master\_key$ (32B kluc)
            \State \textbf{Output:} $auth\_key$ (32B autentifikacny kluc)
            
            \State $auth\_key \gets \text{crypto\_blake2b}(master\_key \parallel \text{"SAKE\_K\_AUTH"}, 32)$
            \Comment{Hashovanie s oddelenou domenou}
            
            \State \Return $auth\_key$
        \EndFunction
    \end{algorithmic}
\end{algorithm}

\begin{algorithm}
    \caption{SAKE: Proces vzajomnej autentifikacie}
    \begin{algorithmic}[1]
        \Function{authenticate\_session}{$key\_chain, is\_initiator$}
            \State \textbf{Input:} struktura $key\_chain$, priznak $is\_initiator$
            \State \textbf{Output:} $session\_key$ alebo chybovy kod
            
            \If{$is\_initiator$} \Comment{Strana klienta}
                \State $client\_nonce \gets \text{generate\_random\_bytes}(16)$ 
                \State $\text{send\_all}(socket, client\_nonce, 16)$ \Comment{Odoslanie nonce serveru}
                
                \State $server\_nonce \gets \text{recv\_all}(socket, 16)$ \Comment{Prijatie nonce servera}
                \State $challenge \gets \text{recv\_all}(socket, 32)$ \Comment{Prijatie vyzvy}
                
                \State $response \gets \text{compute\_response}(key\_chain.auth\_key\_curr, challenge, server\_nonce)$
                \State $\text{send\_all}(socket, response, 32)$ \Comment{Odoslanie odpovede serveru}
            \Else \Comment{Strana servera}
                \State $client\_nonce \gets \text{recv\_all}(socket, 16)$ \Comment{Prijatie nonce klienta}
                
                \State $server\_nonce \gets \text{generate\_random\_bytes}(16)$
                \State $challenge \gets \text{generate\_challenge}(key\_chain.auth\_key\_curr, client\_nonce, server\_nonce)$
                
                \State $\text{send\_all}(socket, server\_nonce, 16)$ \Comment{Odoslanie nonce servera}
                \State $\text{send\_all}(socket, challenge, 32)$ \Comment{Odoslanie vyzvy}
                
                \State $client\_response \gets \text{recv\_all}(socket, 32)$ \Comment{Prijatie odpovede klienta}
                
                \State $expected\_response \gets \text{compute\_response}(key\_chain.auth\_key\_curr, challenge, server\_nonce)$
                \If{$client\_response \neq expected\_response$}
                    \State \Return \text{ERROR\_AUTHENTICATION\_FAILED} \Comment{Autentifikacia zlyhala}
                \EndIf
            \EndIf
            
            \State $session\_key \gets \text{derive\_session\_key}(key\_chain.master\_key, client\_nonce, server\_nonce)$
            
            \State \text{update\_key\_chain}($key\_chain$) \Comment{Vyvoj klucov}
            
            \State \Return $session\_key$
        \EndFunction
    \end{algorithmic}
\end{algorithm}

\begin{algorithm}
    \caption{SAKE: Pomocne funkcie autentifikacie}
    \begin{algorithmic}[1]
        \Function{generate\_challenge}{$auth\_key, client\_nonce, server\_nonce$}
            \State \textbf{Input:} Autentifikacny kluc, nonce klienta, nonce servera
            \State \textbf{Output:} Vyzva vyzadujuca znalost $auth\_key$
            
            \State $challenge \gets \text{crypto\_blake2b}(auth\_key \parallel client\_nonce \parallel server\_nonce \parallel \text{"SAKE\_CHALLENGE"}, 32)$
            
            \State \Return $challenge$
        \EndFunction
        
        \Function{compute\_response}{$auth\_key, challenge, server\_nonce$}
            \State \textbf{Input:} Autentifikacny kluc, vyzva, nonce servera
            \State \textbf{Output:} Odpoved preukazujuca znalost $auth\_key$
            
            \State $response \gets \text{crypto\_blake2b}(auth\_key \parallel challenge \parallel server\_nonce, 32)$
            
            \State \Return $response$
        \EndFunction
        
        \Function{derive\_session\_key}{$master\_key, client\_nonce, server\_nonce$}
            \State \textbf{Input:} Hlavny kluc, nonce klienta, nonce servera
            \State \textbf{Output:} Relacny kluc pre bezpecnu komunikaciu
            
            \State $session\_key \gets \text{crypto\_blake2b}(master\_key \parallel client\_nonce \parallel server\_nonce \parallel \text{"SAKE\_SESSION"}, 32)$
            
            \State \Return $session\_key$
        \EndFunction
    \end{algorithmic}
\end{algorithm}

\begin{algorithm}
    \caption{SAKE: Postup aktualizacie retaze klucov}
    \begin{algorithmic}[1]
        \Function{update\_key\_chain}{$key\_chain$}
            \State \textbf{Input:} struktura $key\_chain$ na aktualizaciu
            \State \textbf{Output:} Aktualizovana $key\_chain$ s vyvinutymi klucmi
            
            \If{$key\_chain.is\_initiator$} \Comment{Iniciator (klient)}
                \State $key\_chain.auth\_key\_prev \gets key\_chain.auth\_key\_curr$ \Comment{Rotacia klucov}
                \State $key\_chain.auth\_key\_curr \gets key\_chain.auth\_key\_next$
                
                \State $temp\_master \gets \text{copy}(key\_chain.master\_key)$
                \State $next\_epoch \gets key\_chain.epoch + 1$
                
                \State $temp\_master \gets \text{crypto\_blake2b}(key\_chain.master\_key \parallel next\_epoch \parallel \text{"SAKE\_K"}, 32)$
                
                \State $key\_chain.auth\_key\_next \gets \text{derive\_authentication\_key}(temp\_master)$
                
                \State $key\_chain.master\_key \gets \text{crypto\_blake2b}(key\_chain.master\_key \parallel key\_chain.epoch \parallel \text{"SAKE\_K"}, 32)$
                
                \State \text{secure\_wipe}($temp\_master$) \Comment{Bezpecne vymazanie docasneho kluca}
            \Else \Comment{Odpovedajuci (server)}
                \State $key\_chain.master\_key \gets \text{crypto\_blake2b}(key\_chain.master\_key \parallel key\_chain.epoch \parallel \text{"SAKE\_K"}, 32)$
                
                \State $key\_chain.auth\_key\_curr \gets \text{derive\_authentication\_key}(key\_chain.master\_key)$
                \State $key\_chain.auth\_key\_prev \gets key\_chain.auth\_key\_curr$
                \State $key\_chain.auth\_key\_next \gets key\_chain.auth\_key\_curr$
            \EndIf
            
            \State $key\_chain.epoch \gets key\_chain.epoch + 1$ \Comment{Zvysenie epochy}
        \EndFunction
    \end{algorithmic}
\end{algorithm}

\end{document}
